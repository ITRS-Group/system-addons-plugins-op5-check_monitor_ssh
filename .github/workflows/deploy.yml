name: Deployment

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
      - uses: DeLaGuardo/setup-clj-kondo@master
        with:
          version: '2021.08.06'

      - uses: actions/checkout@v2

      - name: clj-kondo
        run: clj-kondo --lint src

      - name: Install lein deps
        run: lein deps

      - name: Lein Kibit
        run: lein kibit

  lein_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: lein deps

    - name: Run tests
      run: lein test

  build_linux:
    name: Build Linux

    needs:
      - lint
      - lein_test

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Make
        run: make

      - name: Move and rename binary
        run: mv target/check_monitor_ssh check_monitor_ssh-${{ matrix.target }}

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: check_monitor_ssh-${{ matrix.target }}
          path: check_monitor_ssh-${{ matrix.target }}

  integration_tests:
    name: Run integration tests

    needs:
      - lint
      - lein_test
      - build_linux

    runs-on: ${{ matrix.os }}

    env:
      BATS_DIR: "test/check_monitor_ssh/bats/"
      BATS_EXT_URL: "https://raw.githubusercontent.com/mbland/go-script-bash/master/lib/bats"

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        include:
          - os: ubuntu-latest
            target: linux-x86_64

    steps:
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.4.1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create directory for bats extensions
        run: mkdir -p "$BATS_DIR"

      - name: Download bats extensions
        run: |
          curl ${BATS_EXT_URL}/assertion-test-helpers -o ${BATS_DIR}/assertion-test-helpers
          curl ${BATS_EXT_URL}/assertions -o ${BATS_DIR}/assertions
          curl ${BATS_EXT_URL}/background-process -o ${BATS_DIR}/background-process
          curl ${BATS_EXT_URL}/helper-function -o ${BATS_DIR}/helper-function
          curl ${BATS_EXT_URL}/helpers -o ${BATS_DIR}/helpers

      - name: Display the contents of the test dir
        run: ls -Ral test

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: check_monitor_ssh-${{ matrix.target }}

      - name: Make artifact executable
        run: chmod +x check_monitor_ssh-${{ matrix.target }}

      - name: List directory
        run: ls -alh

      - name: Rename binary
        run: mv check_monitor_ssh-${{ matrix.target }} check_monitor_ssh

      - name: Run tests
        shell: bash
        run: bats -r .

  create_release:
    name: Create Release

    needs:
      - lint
      - lein_test
      - build_linux
      - integration_tests

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_tag: ${{ steps.tag.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{github.ref}}
          draft: false
          prerelease: false

  build_and_sign_rpm:
    name: Build and sign RPM

    needs:
      - create_release

    runs-on: ubuntu-latest

    outputs:
      rpm_package: ${{ steps.build_rpm.outputs.package }}

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: check_monitor_ssh-${{ matrix.target }}

      - name: Build RPM Package
        id: build_rpm
        uses: kentik/pkg@v1.0.0-rc7
        with:
          name: check_monitor_ssh
          version: ${{ needs.create_release.outputs.release_tag }}
          arch: x86_64
          format: rpm
          package: package.yml

      - name: Save passphrase to file
        run: echo "${{ secrets.SIGN_KEY_PASSPHRASE }}" > ~/.sign_pass

      - name: Change permissions on pass file
        run: chmod 600 ~/.sign_pass

      - name: Import signing key to sign RPM
        run: |
          echo "${{ secrets.SIGN_KEY }}" | \
          gpg --batch --pinentry-mode loopback --import

      - name: DEBUG List available keys
        run: gpg -K

      - name: Export public key
        run: |
          gpg --export -a "${{ secrets.SIGN_KEY_FINGERPRINT }}" \
          > RPM-GPG-KEY-pmanager

      - name: Import the public key to the RPM database
        run: rpm --import RPM-GPG-KEY-pmanager

      - name: Print the GPG keys in the RPM database
        run: |
          rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'

      - name: Check existing signatures
        run: rpm --checksig ${{ steps.build_rpm.outputs.package }}

      - name: Change owner of the RPM
        run: sudo chown runner:docker ${{ steps.build_rpm.outputs.package }}

      - name: Copy template .rpmmacros to ~/
        run: cp template/.rpmmacros ~/

      - name: Print the current state of the directory
        run: ls -alh

      - name: Print the current state of ~/
        run: ls -alh ~/

      - name: Sign the RPM
        run: rpm -vv --addsign ${{ steps.build_rpm.outputs.package }}

      - name: Verify the signature
        run: rpm --checksig ${{ steps.build_rpm.outputs.package }}

      - name: Create checksum
        uses: tristan-weil/ghaction-checksum-sign-artifact@v1.0.1
        with:
          checksum_output: 'one_file_per_digest'
          sign_output: 'checksum_detach'
          path: 'check_monitor_ssh*'
          sign_key: '${{ secrets.SIGN_KEY }}'
          sign_key_passphrase: '${{ secrets.SIGN_KEY_PASSPHRASE }}'
          sign_key_fingerprint: '${{ secrets.SIGN_KEY_FINGERPRINT }}'
          sign_keyserver: '${{ secrets.SIGN_KEY_KEYSERVER }}'

      - name: Print the current state of the directory
        run: ls -alh

      - name: Upload checksum artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS
          path: SHA256SUMS

      - name: Upload signature artifact
        uses: actions/upload-artifact@v2
        with:
          name: SHA256SUMS.asc
          path: SHA256SUMS.asc

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v2
        with:
          path: ./${{ steps.build_rpm.outputs.package }}
          name: ${{ steps.build_rpm.outputs.package }}

  upload_release_assets:
    name: Upload Release Assets

    needs:
      - create_release
      - build_and_sign_rpm

    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target:
          - linux-x86_64

    steps:
      - uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: check_monitor_ssh-${{ matrix.target }}

      - name: Download RPM artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: ${{ needs.build_and_sign_rpm.outputs.rpm_package }}

      - name: Download checksum artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS

      - name: Download signature artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: SHA256SUMS.asc

      - name: Release executable
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./check_monitor_ssh-${{ matrix.target }}
          asset_name: check_monitor_ssh-${{ matrix.target }}
          asset_content_type: application/octet-stream

      - name: Release checksums
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain

      - name: Release signature
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./SHA256SUMS.asc
          asset_name: SHA256SUMS.asc
          asset_content_type: text/plain

      - name: Release RPM
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ needs.build_and_sign_rpm.outputs.rpm_package }}
          asset_name: ${{ needs.build_and_sign_rpm.outputs.rpm_package }}
          asset_content_type: application/x-rpm
